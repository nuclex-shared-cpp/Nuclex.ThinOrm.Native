#pragma region Apache License 2.0
/*
Nuclex Native Framework
Copyright (C) 2002-2024 Markus Ewald / Nuclex Development Labs

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
#pragma endregion // Apache License 2.0

#ifndef NUCLEX_THINORM_FLUENT_QUERYABLE_H
#define NUCLEX_THINORM_FLUENT_QUERYABLE_H

#include "Nuclex/ThinOrm/Config.h"

#include <cstddef> // for std::size_t
#include <vector> // for std::vector<>
#include <optional> // for std::optional<>

namespace Nuclex::ThinOrm::Fluent {

  // ------------------------------------------------------------------------------------------- //

  /// <summary>Interface by which queries can be built</summary>
  /// <typeparam name="TResultEntity">Type of entity the query is returning</typeparam>
  template<typename TResultEntity>
  class NUCLEX_THINORM_TYPE Queryable {

    /// <summary>Immediately frees all resources owned by the Queryable</summary>
    public: NUCLEX_THINORM_API virtual inline ~Queryable();

    /// <summary>Filters the results by the specified criteria</summary>
    /// <returns>The Queryable itself to allow further modifiers to be chained</returns>
    public: NUCLEX_THINORM_API virtual Queryable &Where(
      // TODO: Figure out convenient syntax to construct where conditions
    ) const = 0;

    /// <summary>Skips the specified number of rows from the result returned</summary>>
    /// <param name="count">Number of result rows that will be skipped</param>
    /// <returns>The Queryable itself to allow further modifiers to be chained</returns>
    public: NUCLEX_THINORM_API virtual Queryable &Skip(std::size_t count) const = 0;

    /// <summary>Limits the number of result rows to the specified count</summary>>
    /// <param name="count">Maximum number of result rows that will be returned</param>
    /// <returns>The Queryable itself to allow further modifiers to be chained</returns>
    public: NUCLEX_THINORM_API virtual Queryable &Take(std::size_t count) const = 0;

    /// <summary>Limits the number of result rows to the specified count</summary>>
    /// <param name="count">Maximum number of result rows that will be returned</param>
    /// <returns>The Queryable itself to allow further modifiers to be chained</returns>
    public: NUCLEX_THINORM_API virtual std::vector<TResultEntity> ToVector() const = 0;

    /// <summary>Returns the first result row of the query</summary>
    /// <returns>The first result row returned by the query</returns>
    /// <remarks>
    ///   The first result row that is returned by the query. If the query has no results,
    ///   this method will throw an exception. If you <em>know and expect</em> that a query
    ///   has exactly one result, prefer the <see cref="Single" /> method which will also
    ///   throw an exception if there is more than one result row, thereby catching flawed
    ///   queries early instead of risking mixed-up data by picking whatever row happened
    ///   to be returned first.
    /// </remarks>
    public: NUCLEX_THINORM_API virtual TResultEntity First() const = 0;

    /// <summary>Returns the first result row of the query or a default value</summary>
    /// <param name="defaultResult">Value to return if the query returns no result</param>
    /// <returns>The first result row returned by the query or the default value</returns>
    /// <remarks>
    ///   This method can be used to read a value from the database that may or may not
    ///   be present. It will never fail - if the query returns no results, the default
    ///   value is returned instead. If the query would return multiple results, whatever
    ///   result ends up being first is returned (and this behavior may be dangeroud if
    ///   you know your query has either one result of none - if that's the case, prefer
    ///   the <see cref="SingleOrDefault" /> method).
    /// </remarks>
    public: NUCLEX_THINORM_API virtual std::optional<TResultEntity> FirstOrDefault(
      const std::optional<TResultEntity> &defaultResultis
    ) const = 0;

    /// <summary>Returns the only result row of the query</summary>
    /// <returns>The only result row generated by the query</returns>
    /// <remarks>
    ///   This method should be used if you run a query where you know that only one row
    ///   will be returned. For example, if you fetch an item by its id. If the result is
    ///   empty or if there is more than one result row, an exception will be thrown.
    /// </remarks>
    public: NUCLEX_THINORM_API virtual TResultEntity Single() const = 0;

    /// <summary>Returns the only result row of the query or a default value</summary>
    /// <param name="defaultResult">Value to return if the query returns no result</param>
    /// <returns>The only result row generated by the query or the default value</returns>
    /// <remarks>
    ///   This method should be used if you run a query where you know that there is is
    ///   no result or exactly one result row. For example, if you fetch an item by its id
    ///   and the item may be either there or missing. If the result If there is more than
    ///   one result row, an exception will be thrown.
    /// </remarks>
    public: NUCLEX_THINORM_API virtual std::optional<TResultEntity> SingleOrDefault(
      const std::optional<TResultEntity> &defaultResult
    ) const = 0;

  };

  // ------------------------------------------------------------------------------------------- //

  template<typename TResultEntity>
  inline Queryable<TResultEntity>::~Queryable() = default;

  // ------------------------------------------------------------------------------------------- //

} // namespace Nuclex::ThinOrm::Fluent

#endif // NUCLEX_THINORM_FLUENT_QUERYABLE_H
