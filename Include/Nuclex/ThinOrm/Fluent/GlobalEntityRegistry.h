#pragma region Apache License 2.0
/*
Nuclex Native Framework
Copyright (C) 2002-2024 Markus Ewald / Nuclex Development Labs

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
#pragma endregion // Apache License 2.0

#ifndef NUCLEX_THINORM_FLUENT_GLOBALENTITYREGISTRY_H
#define NUCLEX_THINORM_FLUENT_GLOBALENTITYREGISTRY_H

#include "Nuclex/ThinOrm/Config.h"
#include "Nuclex/ThinOrm/Fluent/TableRegistrationSyntax.h"

#include <memory> // for std::unique_ptr<>

namespace Nuclex::ThinOrm::Fluent {

  // ------------------------------------------------------------------------------------------- //

  /// <summary>Exposes a table in the data contex for fluent queriest</summary>
  class NUCLEX_THINORM_TYPE GlobalEntityRegistry : public EntityMappingConfigurator {

    /// <summary>Initializes a new entity registry</summary>
    public: NUCLEX_THINORM_API GlobalEntityRegistry();

    /// <summary>Frees all resources owned by the entity registry</summary>
    public: NUCLEX_THINORM_API ~GlobalEntityRegistry();

    /// <summary>Registers an entity class that maps to a specific table</summary>
    /// <typeparam name="TEntity">Entity class that will be registered</typeparam>
    /// <param name="tableName">Name of the table in the database</param>
    /// <returns>
    ///   A fluent interface helper that provides the syntactic methods for mapping
    ///   columns in the table to attributes in the entity class.
    /// </returns>
    public: template<typename TEntity>
    NUCLEX_THINORM_API inline TableRegistrationSyntax<TEntity> RegisterTable(
      const std::u8string_view &tableName
    );

    /// <summary>Registers an entity class that maps to a specific table</summary>
    /// <param name="entityType">Type information </param>
    /// <param name="tableName">Name of the table in the database</param>
    public: NUCLEX_THINORM_API void AddEntity(
      const std::type_info &entityType, const std::u8string_view &tableName
    ) override;

    /// <summary>Registers an entity class that maps to a specific table</summary>
    /// <param name="entityType">Type information identifying the entity</param>
    /// <param name="columnName">Name of the column in the database table</param>
    /// <param name="getter">Getter through which the attribute can be read</param>
    /// <param name="setter">Getter through which the attribute can be updated</param>
    /// <param name="attributeType">RTTI type of the attribute in the entity class</param>
    public: NUCLEX_THINORM_API void AddEntityAttribute(
      const std::type_info &entityType,
      const std::u8string_view &columnName,
      GetAttributeValueFunction *getter,
      SetAttributeValueFunction *setter,
      const std::type_info &attributeType
    ) override;

    /// <summary>Configures an already-registered column as a nullable or not</summary>
    /// <param name="entityType">Type information identifying the entity</param>
    /// <param name="columnName">Name of the column in the database table</param>
    /// <param name="isNullable">Whether the column is nullable in the table</param>
    public: NUCLEX_THINORM_API void SetColumnNullable(
      const std::type_info &entityType,
      const std::u8string_view &columnName,
      bool isNullable = true
    ) override;

    /// <summary>Configures an already-registered column as a primary key or not</summary>
    /// <param name="entityType">Type information identifying the entity</param>
    /// <param name="columnName">Name of the column in the database table</param>
    /// <param name="isPrimaryKey">Whether the column is a primary key in the table</param>
    public: NUCLEX_THINORM_API void SetColumnIsPrimaryKey(
      const std::type_info &entityType,
      const std::u8string_view &columnName,
      bool isPrimaryKey = true
    ) override;

    /// <summary>Configures an already-registered column as auto-generated or not</summary>
    /// <param name="entityType">Type information identifying the entity</param>
    /// <param name="columnName">Name of the column in the database table</param>
    /// <param name="isPrimaryKey">Whether the column receives an auto-generated value</param>
    public: NUCLEX_THINORM_API void SetColumnIsAutoGenerated(
      const std::type_info &entityType,
      const std::u8string_view &columnName,
      bool isAutoGenerated = true
    ) override;

    /// <summary>Internal data stored in the class (i.e. basic pImpl idiom)</summary>
    private: class Implementation;

    /// <summary>Holds the registered types, look-up tables and other internal things</summary>
    private: std::unique_ptr<Implementation> implementation;

  };

  // ------------------------------------------------------------------------------------------- //

  template<typename TEntity>
  inline TableRegistrationSyntax<TEntity> GlobalEntityRegistry::RegisterTable(
    const std::u8string_view &tableName
  ) {
    AddEntity(typeid(TEntity), tableName);
    return TableRegistrationSyntax<TEntity>(*this, tableName);
  }

  // ------------------------------------------------------------------------------------------- //

} // namespace Nuclex::ThinOrm::Fluent

#endif // NUCLEX_THINORM_FLUENT_GLOBALENTITYREGISTRY_H
