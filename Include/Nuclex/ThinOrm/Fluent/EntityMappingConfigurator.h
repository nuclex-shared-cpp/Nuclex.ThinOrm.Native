#pragma region Apache License 2.0
/*
Nuclex Native Framework
Copyright (C) 2002-2024 Markus Ewald / Nuclex Development Labs

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
#pragma endregion // Apache License 2.0

#ifndef NUCLEX_THINORM_FLUENT_ENTITYMAPPINGCONFIGURATOR_H
#define NUCLEX_THINORM_FLUENT_ENTITYMAPPINGCONFIGURATOR_H

#include "Nuclex/ThinOrm/Config.h"
#include "Nuclex/ThinOrm/Value.h" // for Value
#include <string> // for std::u8string_view

namespace Nuclex::ThinOrm::Fluent {

  // ------------------------------------------------------------------------------------------- //

  /// <summary>
  ///   Interface through which the registered entities and attributes can be configured
  /// </summary>
  class NUCLEX_THINORM_TYPE EntityMappingConfigurator {

    /// <summary
    ///   >Signature for a function that reads the value of an attribute in an entity
    /// </summary>
    /// <param name="entity">
    ///   Instance of an entity class from which an attribute will be read
    /// </param>
    /// <returns>The attribute's value wrapped in a <see cref="Value" /> class</returns>
    public: typedef Value GetAttributeValueFunction(const void *entity);

    /// <summary
    ///   >Signature for a function that sets the value of an attribute in an entity
    /// </summary>
    /// <param name="entity">
    ///   Instance of an entity class in which an attribute will be set
    /// </param>
    /// <param name="value">
    ///   The value to assign to the attribute wrapped in a <see cref="Value" /> class
    /// </param>
    public: typedef void SetAttributeValueFunction(void *entity, const Value &value);

    /// <summary>Registers an entity class that maps to a specific table</summary>
    /// <param name="entityType">Type information </param>
    /// <param name="tableName">Name of the table in the database</param>
    public: NUCLEX_THINORM_API virtual void AddEntity(
      const std::type_info &entityType, const std::u8string_view &tableName
    ) = 0;

    /// <summary>Registers an entity class that maps to a specific table</summary>
    /// <param name="entityType">Type information identifying the entity</param>
    /// <param name="columnName">Name of the column in the database table</param>
    /// <param name="getter">Getter through which the attribute can be read</param>
    /// <param name="setter">Getter through which the attribute can be updated</param>
    public: NUCLEX_THINORM_API virtual void AddEntityAttribute(
      const std::type_info &entityType,
      const std::u8string_view &columnName,
      GetAttributeValueFunction getter,
      SetAttributeValueFunction setter
    ) = 0;

    /// <summary>Configures an already-registered column as a nullable or not</summary>
    /// <param name="entityType">Type information identifying the entity</param>
    /// <param name="columnName">Name of the column in the database table</param>
    /// <param name="isNullable">Whether the column is nullable in the table</param>
    public: NUCLEX_THINORM_API virtual void SetColumnNullable(
      const std::type_info &entityType,
      const std::u8string_view &columnName,
      bool isNullable = true
    ) = 0;

    /// <summary>Configures an already-registered column as a primary key or not</summary>
    /// <param name="entityType">Type information identifying the entity</param>
    /// <param name="columnName">Name of the column in the database table</param>
    /// <param name="isPrimaryKey">Whether the column is a primary key in the table</param>
    public: NUCLEX_THINORM_API virtual void SetColumnIsPrimaryKey(
      const std::type_info &entityType,
      const std::u8string_view &columnName,
      bool isPrimaryKey = true
    ) = 0;

    /// <summary>Configures an already-registered column as auto-generated or not</summary>
    /// <param name="entityType">Type information identifying the entity</param>
    /// <param name="columnName">Name of the column in the database table</param>
    /// <param name="isPrimaryKey">Whether the column receives an auto-generated value</param>
    public: NUCLEX_THINORM_API virtual void SetColumnIsAutoGenerated(
      const std::type_info &entityType,
      const std::u8string_view &columnName,
      bool isAutoGenerated = true
    ) = 0;

  };

  // ------------------------------------------------------------------------------------------- //

} // namespace Nuclex::ThinOrm::Fluent

#endif // NUCLEX_THINORM_FLUENT_GLOBALENTITYREGISTRY_H
