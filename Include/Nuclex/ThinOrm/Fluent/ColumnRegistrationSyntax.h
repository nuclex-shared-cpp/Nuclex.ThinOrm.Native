#pragma region Apache License 2.0
/*
Nuclex Native Framework
Copyright (C) 2002-2024 Markus Ewald / Nuclex Development Labs

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
#pragma endregion // Apache License 2.0

#ifndef NUCLEX_THINORM_FLUENT_COLUMNREGISTRATIONSYNTAX_H
#define NUCLEX_THINORM_FLUENT_COLUMNREGISTRATIONSYNTAX_H

#include "Nuclex/ThinOrm/Config.h"
#include "Nuclex/ThinOrm/Fluent/EntityMappingConfigurator.h" // for EntityMappingConfigurator
#include "Nuclex/ThinOrm/Fluent/AttributeAccessor.h" // for AttributeAccessor
#include <string> // for std::u8string_view

namespace Nuclex::ThinOrm::Fluent {

  // ------------------------------------------------------------------------------------------- //

  /// <summary>
  ///   Syntax used to fluently describe columns to the <see cref="GlobalEntityRegistry" />
  /// </summary>
  template<typename TEntity, typename TAttribute>
  class NUCLEX_THINORM_TYPE ColumnRegistrationSyntax {

    /// <summary>Initializes the column registration syntax helper</summary>
    /// <param name="registry">
    ///   Entity registry in which the description of the entity-table mapping will
    ///   ultimately be stored
    /// </param>
    /// <param name="tableName">Name of the table for which a mapping is being set up</param>
    /// <param name="columnName">Column whose mapping is being configured</param>
    public: NUCLEX_THINORM_API inline ColumnRegistrationSyntax(
      EntityMappingConfigurator &registry,
      const std::u8string_view &tableName,
      const std::u8string_view &columnName
    );

    /// <summary>
    ///   Adds another mapped column to the entity class and lets you describe it
    /// </summary>
    /// <typeparam name="AttributePointer">Offset pointer to the attribute to map</typeparam>
    /// <typeparam name="TAttributePointer">Type of the attribute pointer</typeparam>
    /// <param name="columnName">Name of the colum in the database table</param>
    /// <returns>
    ///   A fluent interface helper that provides the syntactic methods for describing
    ///   the column or starting the registration of another column.
    /// </returns>
    public: template<
      auto AttributePointer,
      // vv SFINAE vv ignore for usage side vv merely forces + identifies types vv
      typename TAttributePointer = decltype(AttributePointer),
      typename = std::enable_if_t<
        std::is_member_object_pointer_v<TAttributePointer> &&
        std::is_same_v<typename AttributePointerTraits<TAttributePointer>::EntityType, TEntity>
      >
    > ColumnRegistrationSyntax<
      TEntity, typename AttributePointerTraits<TAttributePointer>::AttributeType
      // typename AttributePointerTraits<TAttributePointer>::DecayedAttr
    > WithColumn(const std::u8string_view &columnName);

    /// <summary>Declares that the column is non-nullable in the database</summary>
    /// <returns>The column registration syntax so other calls can be chained on it</returns>
    public: NUCLEX_THINORM_API inline ColumnRegistrationSyntax &NotNull();

    /// <summary>Declares that the column is a primary key for the table</summary>
    /// <returns>The column registration syntax so other calls can be chained on it</returns>
    public: NUCLEX_THINORM_API inline ColumnRegistrationSyntax &PrimaryKey();

    /// <summary>Declares that the column uses an auto-generated unique id value</summary>
    /// <returns>The column registration syntax so other calls can be chained on it</returns>
    public: NUCLEX_THINORM_API inline ColumnRegistrationSyntax &AutoGenerated();

    //public: ColumnRegistrationSyntax &Length();

    /// <summary>Global registry in which the table will be registered</summary>
    private: EntityMappingConfigurator &registry;
    /// <summary>Name of the table that is being set up</summary>
    private: std::u8string_view tableName;
    /// <summary>Name of the column that is being configured</summary>
    private: std::u8string_view columnName;

  };

  // ------------------------------------------------------------------------------------------- //

  template<typename TEntity, typename TAttribute>
  inline ColumnRegistrationSyntax<TEntity, TAttribute>::ColumnRegistrationSyntax(
    EntityMappingConfigurator &registry,
    const std::u8string_view &tableName,
    const std::u8string_view &columnName
  ) :
    registry(registry),
    tableName(tableName),
    columnName(columnName) {}

  // ------------------------------------------------------------------------------------------- //

  template<typename TEntity, typename TAttribute>
  template<auto AttributePointer, typename TAttributePointer, typename>
  ColumnRegistrationSyntax<
    TEntity, typename AttributePointerTraits<TAttributePointer>::AttributeType
    //typename AttributePointerTraits<TAttributePointer>::DecayedAttr
  > ColumnRegistrationSyntax<TEntity, TAttribute>::WithColumn(
    const std::u8string_view &columnName
  ) {
    this->registry.AddEntityAttribute(
      typeid(TEntity),
      columnName,
      &AttributeAccessor<AttributePointer>::Get,
      &AttributeAccessor<AttributePointer>::Set
    );

    return ColumnRegistrationSyntax<
      TEntity, typename AttributePointerTraits<TAttributePointer>::AttributeType
    >(this->registry, this->tableName, columnName);
  }

  // ------------------------------------------------------------------------------------------- //

  template<typename TEntity, typename TAttribute>
  inline ColumnRegistrationSyntax<
    TEntity, TAttribute
  > &ColumnRegistrationSyntax<TEntity, TAttribute>::NotNull() {
    this->registry.SetColumnNullable(typeid(TEntity), this->columnName, false);
    return *this;
  }

  // ------------------------------------------------------------------------------------------- //

  template<typename TEntity, typename TAttribute>
  inline ColumnRegistrationSyntax<
    TEntity, TAttribute
  > &ColumnRegistrationSyntax<TEntity, TAttribute>::PrimaryKey() {
    this->registry.SetColumnIsPrimaryKey(typeid(TEntity), this->columnName, true);
    return *this;
  }

  // ------------------------------------------------------------------------------------------- //

  template<typename TEntity, typename TAttribute>
  inline ColumnRegistrationSyntax<
    TEntity, TAttribute
  > &ColumnRegistrationSyntax<TEntity, TAttribute>::AutoGenerated() {
    this->registry.SetColumnIsAutoGenerated(typeid(TEntity), this->columnName, true);
    return *this;
  }

  // ------------------------------------------------------------------------------------------- //

} // namespace Nuclex::ThinOrm::Fluent

#endif // NUCLEX_THINORM_FLUENT_COLUMNREGISTRATIONSYNTAX_H
